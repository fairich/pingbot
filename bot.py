@client.on(events.NewMessage(pattern=r'^/ping$'))
async def ping_cmd(event):
    try:
        chat = await event.get_chat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        can_ping, remaining = await check_cooldown('ping', chat.id)
        if not can_ping:
            await event.respond(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining//60} –º–∏–Ω—É—Ç –∏ {remaining%60} —Å–µ–∫—É–Ω–¥")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await client.get_participants(chat)
        mentions = []

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not data_store.ping_list:
            for user in participants:
                if not user.bot and not user.deleted:
                    data_store.ping_list.add(user.id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user in participants:
            if (not user.bot and not user.deleted and 
                user.id in data_store.ping_list):
                mentions.append(f"[{user.first_name}](tg://user?id={user.id})")

        if not mentions:
            await event.respond("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        mention_groups = split_list(mentions, 20)
        for group in mention_groups:
            await event.respond("üîî –ü–∏–Ω–≥!\n" + " ".join(group))
            await asyncio.sleep(2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        data_store.save_data()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ping_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@client.on(events.NewMessage(pattern=r'^/pingoff$'))
async def pingoff_cmd(event):
    try:
        user_id = event.sender_id
        if user_id in data_store.ping_list:
            data_store.ping_list.remove(user_id)
            data_store.save_data()
            await event.respond("‚úÖ –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            await event.respond("‚ùå –í—ã —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ pingoff_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@client.on(events.NewMessage(pattern=r'^/pingon$'))
async def pingon_cmd(event):
    try:
        user_id = event.sender_id
        if user_id not in data_store.ping_list:
            data_store.ping_list.add(user_id)
            data_store.save_data()
            await event.respond("‚úÖ –í—ã –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            await event.respond("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ pingon_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

# –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@client.on(events.ChatAction)
async def handle_user_update(event):
    try:
        if event.user_joined or event.user_added:
            user_id = event.user_id
            if user_id not in data_store.ping_list:
                data_store.ping_list.add(user_id)
                data_store.save_data()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {str(e)}")