from telethon.sync import TelegramClient
from telethon import events
from telethon.tl.types import ChannelParticipantsAdmins
import asyncio
import os
import requests
from threading import Thread
import time
from flask import Flask
import json

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
api_id = int(os.environ.get('API_ID'))
api_hash = os.environ.get('API_HASH')
bot_token = os.environ.get('BOT_TOKEN')
RENDER_URL = "https://ping-bot-asa4.onrender.com"

# –°–æ–∑–¥–∞–µ–º event loop
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient('bot_session', api_id, api_hash, loop=loop)

class DataStore:
    def __init__(self):
        self.ping_disabled = set()  # –•—Ä–∞–Ω–∏–º —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.last_ping_time = {}
        self.load_data()
    
    def load_data(self):
        try:
            with open('bot_data.json', 'r') as f:
                data = json.load(f)
                self.ping_disabled = set(data.get('ping_disabled', []))
                self.last_ping_time = data.get('last_ping_time', {})
        except FileNotFoundError:
            pass

    def save_data(self):
        data = {
            'ping_disabled': list(self.ping_disabled),
            'last_ping_time': self.last_ping_time
        }
        with open('bot_data.json', 'w') as f:
            json.dump(data, f)

data_store = DataStore()

def split_list(lst, n):
    return [lst[i:i + n] for i in range(0, len(lst), n)]

async def check_cooldown(command_type, chat_id):
    current_time = time.time()
    last_time = data_store.last_ping_time.get(f"{command_type}_{chat_id}", 0)
    if current_time - last_time < 1800:  # 30 –º–∏–Ω—É—Ç
        remaining = 1800 - (current_time - last_time)
        return False, int(remaining)
    data_store.last_ping_time[f"{command_type}_{chat_id}"] = current_time
    return True, 0

@client.on(events.NewMessage(pattern=r'^/all$'))
async def all_cmd(event):
    try:
        chat = await event.get_chat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        can_ping, remaining = await check_cooldown('all', chat.id)
        if not can_ping:
            await event.respond(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining//60} –º–∏–Ω—É—Ç –∏ {remaining%60} —Å–µ–∫—É–Ω–¥")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await client.get_participants(chat)
        mentions = []

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        for user in participants:
            if not user.bot and not user.deleted:
                mentions.append(f"[{user.first_name}](tg://user?id={user.id})")

        if not mentions:
            await event.respond("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        mention_groups = split_list(mentions, 20)
        for group in mention_groups:
            await event.respond("üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n" + " ".join(group))
            await asyncio.sleep(2)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ all_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@client.on(events.NewMessage(pattern=r'^/ping$'))
async def ping_cmd(event):
    try:
        chat = await event.get_chat()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        can_ping, remaining = await check_cooldown('ping', chat.id)
        if not can_ping:
            await event.respond(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {remaining//60} –º–∏–Ω—É—Ç –∏ {remaining%60} —Å–µ–∫—É–Ω–¥")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await client.get_participants(chat)
        mentions = []

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –ù–ï –æ—Ç–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for user in participants:
            if not user.bot and not user.deleted and user.id not in data_store.ping_disabled:
                mentions.append(f"[{user.first_name}](tg://user?id={user.id})")

        if not mentions:
            await event.respond("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        mention_groups = split_list(mentions, 20)
        for group in mention_groups:
            await event.respond("üîî –ü–∏–Ω–≥!\n" + " ".join(group))
            await asyncio.sleep(2)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ping_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@client.on(events.NewMessage(pattern=r'^/pingoff$'))
async def pingoff_cmd(event):
    try:
        user_id = event.sender_id
        if user_id not in data_store.ping_disabled:
            data_store.ping_disabled.add(user_id)
            data_store.save_data()
            await event.respond("‚úÖ –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            await event.respond("‚ùå –í—ã —É–∂–µ –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ pingoff_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@client.on(events.NewMessage(pattern=r'^/pingon$'))
async def pingon_cmd(event):
    try:
        user_id = event.sender_id
        if user_id in data_store.ping_disabled:
            data_store.ping_disabled.remove(user_id)
            data_store.save_data()
            await event.respond("‚úÖ –í—ã –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            await event.respond("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ pingon_cmd: {str(e)}")
        await event.respond("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@app.route('/')
def home():
    return "Bot is running!"

def keep_alive():
    while True:
        try:
            requests.get(RENDER_URL)
            print("–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω - –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {str(e)}")
        time.sleep(780)

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)

def main():
    flask_thread = Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    keep_alive_thread = Thread(target=keep_alive)
    keep_alive_thread.daemon = True
    keep_alive_thread.start()
    
    with client:
        client.start(bot_token=bot_token)
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        client.run_until_disconnected()

if __name__ == '__main__':
    main()